// AUTOGENERATED FILE
package store

import (
	context "context"
	reflect "reflect"

	model "github.com/playmixer/gophermart/internal/adapters/store/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccrual mocks base method.
func (m *MockStore) AddAccrual(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccrual", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccrual indicates an expected call of AddAccrual.
func (mr *MockStoreMockRecorder) AddAccrual(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccrual", reflect.TypeOf((*MockStore)(nil).AddAccrual), ctx, order)
}

// GetOrdersNotPrecessed mocks base method.
func (m *MockStore) GetOrdersNotPrecessed(ctx context.Context) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersNotPrecessed", ctx)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersNotPrecessed indicates an expected call of GetOrdersNotPrecessed.
func (mr *MockStoreMockRecorder) GetOrdersNotPrecessed(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersNotPrecessed", reflect.TypeOf((*MockStore)(nil).GetOrdersNotPrecessed), ctx)
}

// GetUserBalance mocks base method.
func (m *MockStore) GetUserBalance(ctx context.Context, userID uint) (model.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(model.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockStoreMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockStore)(nil).GetUserBalance), ctx, userID)
}

// GetUserByLogin mocks base method.
func (m *MockStore) GetUserByLogin(ctx context.Context, login string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockStoreMockRecorder) GetUserByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockStore)(nil).GetUserByLogin), ctx, login)
}

// GetUserOrders mocks base method.
func (m *MockStore) GetUserOrders(ctx context.Context, userID uint) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockStoreMockRecorder) GetUserOrders(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockStore)(nil).GetUserOrders), ctx, userID)
}

// GetWithdrawalsFromBalance mocks base method.
func (m *MockStore) GetWithdrawalsFromBalance(ctx context.Context, balanceID uint) ([]*model.WithdrawBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsFromBalance", ctx, balanceID)
	ret0, _ := ret[0].([]*model.WithdrawBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsFromBalance indicates an expected call of GetWithdrawalsFromBalance.
func (mr *MockStoreMockRecorder) GetWithdrawalsFromBalance(ctx, balanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsFromBalance", reflect.TypeOf((*MockStore)(nil).GetWithdrawalsFromBalance), ctx, balanceID)
}

// RegisterUser mocks base method.
func (m *MockStore) RegisterUser(ctx context.Context, login, hashPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, login, hashPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockStoreMockRecorder) RegisterUser(ctx, login, hashPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockStore)(nil).RegisterUser), ctx, login, hashPassword)
}

// UploadOrder mocks base method.
func (m *MockStore) UploadOrder(ctx context.Context, userID uint, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadOrder", ctx, userID, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadOrder indicates an expected call of UploadOrder.
func (mr *MockStoreMockRecorder) UploadOrder(ctx, userID, orderNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadOrder", reflect.TypeOf((*MockStore)(nil).UploadOrder), ctx, userID, orderNumber)
}

// WithdrawFromUserBalance mocks base method.
func (m *MockStore) WithdrawFromUserBalance(ctx context.Context, userID uint, order string, sum float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromUserBalance", ctx, userID, order, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFromUserBalance indicates an expected call of WithdrawFromUserBalance.
func (mr *MockStoreMockRecorder) WithdrawFromUserBalance(ctx, userID, order, sum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromUserBalance", reflect.TypeOf((*MockStore)(nil).WithdrawFromUserBalance), ctx, userID, order, sum)
}
